//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.6
//
// <auto-generated>
//
// Generated from file `CameraRGBDSimple.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __CameraRGBDSimple_h__
#define __CameraRGBDSimple_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/ValueF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Comparable.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/GCObject.h>
#include <Ice/Value.h>
#include <Ice/Incoming.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/Optional.h>
#include <Ice/ExceptionHelpers.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 6
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace RoboCompCameraRGBDSimple
{

class CameraRGBDSimple;
class CameraRGBDSimplePrx;

}

namespace RoboCompCameraRGBDSimple
{

class HardwareFailedException : public ::Ice::UserExceptionHelper<HardwareFailedException, ::Ice::UserException>
{
public:

    virtual ~HardwareFailedException();

    HardwareFailedException(const HardwareFailedException&) = default;

    HardwareFailedException() = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    HardwareFailedException(const ::std::string& what) :
        what(what)
    {
    }

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::string&> ice_tuple() const
    {
        return std::tie(what);
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    ::std::string what;
};

/// \cond INTERNAL
static HardwareFailedException _iceS_HardwareFailedException_init;
/// \endcond

using ImgType = ::std::vector<::Ice::Byte>;

using DepthType = ::std::vector<::Ice::Byte>;

struct Point3D
{
    float x;
    float y;
    float z;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const float&, const float&, const float&> ice_tuple() const
    {
        return std::tie(x, y, z);
    }
};

using PointsType = ::std::vector<Point3D>;

struct TPoints
{
    ::RoboCompCameraRGBDSimple::PointsType points;
    long long int alivetime;
    float period;
    bool compressed;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::RoboCompCameraRGBDSimple::PointsType&, const long long int&, const float&, const bool&> ice_tuple() const
    {
        return std::tie(points, alivetime, period, compressed);
    }
};

struct TImage
{
    bool compressed;
    int cameraID;
    int width;
    int height;
    int depth;
    int focalx;
    int focaly;
    long long int alivetime;
    float period;
    ::RoboCompCameraRGBDSimple::ImgType image;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const bool&, const int&, const int&, const int&, const int&, const int&, const int&, const long long int&, const float&, const ::RoboCompCameraRGBDSimple::ImgType&> ice_tuple() const
    {
        return std::tie(compressed, cameraID, width, height, depth, focalx, focaly, alivetime, period, image);
    }
};

struct TDepth
{
    bool compressed;
    int cameraID;
    int width;
    int height;
    int focalx;
    int focaly;
    long long int alivetime;
    float period;
    float depthFactor;
    ::RoboCompCameraRGBDSimple::DepthType depth;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const bool&, const int&, const int&, const int&, const int&, const int&, const long long int&, const float&, const float&, const ::RoboCompCameraRGBDSimple::DepthType&> ice_tuple() const
    {
        return std::tie(compressed, cameraID, width, height, focalx, focaly, alivetime, period, depthFactor, depth);
    }
};

struct TRGBD
{
    ::RoboCompCameraRGBDSimple::TImage image;
    ::RoboCompCameraRGBDSimple::TDepth depth;
    ::RoboCompCameraRGBDSimple::TPoints points;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::RoboCompCameraRGBDSimple::TImage&, const ::RoboCompCameraRGBDSimple::TDepth&, const ::RoboCompCameraRGBDSimple::TPoints&> ice_tuple() const
    {
        return std::tie(image, depth, points);
    }
};

using Ice::operator<;
using Ice::operator<=;
using Ice::operator>;
using Ice::operator>=;
using Ice::operator==;
using Ice::operator!=;

}

namespace RoboCompCameraRGBDSimple
{

class CameraRGBDSimple : public virtual ::Ice::Object
{
public:

    using ProxyType = CameraRGBDSimplePrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual TRGBD getAll(::std::string camera, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getAll(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual TDepth getDepth(::std::string camera, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getDepth(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual TImage getImage(::std::string camera, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getImage(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual TPoints getPoints(::std::string camera, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getPoints(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

}

namespace RoboCompCameraRGBDSimple
{

class CameraRGBDSimplePrx : public virtual ::Ice::Proxy<CameraRGBDSimplePrx, ::Ice::ObjectPrx>
{
public:

    TRGBD getAll(const ::std::string& camera, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::RoboCompCameraRGBDSimple::TRGBD>(true, this, &CameraRGBDSimplePrx::_iceI_getAll, camera, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getAllAsync(const ::std::string& camera, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::RoboCompCameraRGBDSimple::TRGBD>>().get_future())
    {
        return _makePromiseOutgoing<::RoboCompCameraRGBDSimple::TRGBD, P>(false, this, &CameraRGBDSimplePrx::_iceI_getAll, camera, context);
    }

    ::std::function<void()>
    getAllAsync(const ::std::string& camera,
                ::std::function<void(::RoboCompCameraRGBDSimple::TRGBD)> response,
                ::std::function<void(::std::exception_ptr)> ex = nullptr,
                ::std::function<void(bool)> sent = nullptr,
                const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::RoboCompCameraRGBDSimple::TRGBD>(std::move(response), std::move(ex), std::move(sent), this, &RoboCompCameraRGBDSimple::CameraRGBDSimplePrx::_iceI_getAll, camera, context);
    }

    /// \cond INTERNAL
    void _iceI_getAll(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::RoboCompCameraRGBDSimple::TRGBD>>&, const ::std::string&, const ::Ice::Context&);
    /// \endcond

    TDepth getDepth(const ::std::string& camera, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::RoboCompCameraRGBDSimple::TDepth>(true, this, &CameraRGBDSimplePrx::_iceI_getDepth, camera, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getDepthAsync(const ::std::string& camera, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::RoboCompCameraRGBDSimple::TDepth>>().get_future())
    {
        return _makePromiseOutgoing<::RoboCompCameraRGBDSimple::TDepth, P>(false, this, &CameraRGBDSimplePrx::_iceI_getDepth, camera, context);
    }

    ::std::function<void()>
    getDepthAsync(const ::std::string& camera,
                  ::std::function<void(::RoboCompCameraRGBDSimple::TDepth)> response,
                  ::std::function<void(::std::exception_ptr)> ex = nullptr,
                  ::std::function<void(bool)> sent = nullptr,
                  const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::RoboCompCameraRGBDSimple::TDepth>(std::move(response), std::move(ex), std::move(sent), this, &RoboCompCameraRGBDSimple::CameraRGBDSimplePrx::_iceI_getDepth, camera, context);
    }

    /// \cond INTERNAL
    void _iceI_getDepth(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::RoboCompCameraRGBDSimple::TDepth>>&, const ::std::string&, const ::Ice::Context&);
    /// \endcond

    TImage getImage(const ::std::string& camera, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::RoboCompCameraRGBDSimple::TImage>(true, this, &CameraRGBDSimplePrx::_iceI_getImage, camera, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getImageAsync(const ::std::string& camera, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::RoboCompCameraRGBDSimple::TImage>>().get_future())
    {
        return _makePromiseOutgoing<::RoboCompCameraRGBDSimple::TImage, P>(false, this, &CameraRGBDSimplePrx::_iceI_getImage, camera, context);
    }

    ::std::function<void()>
    getImageAsync(const ::std::string& camera,
                  ::std::function<void(::RoboCompCameraRGBDSimple::TImage)> response,
                  ::std::function<void(::std::exception_ptr)> ex = nullptr,
                  ::std::function<void(bool)> sent = nullptr,
                  const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::RoboCompCameraRGBDSimple::TImage>(std::move(response), std::move(ex), std::move(sent), this, &RoboCompCameraRGBDSimple::CameraRGBDSimplePrx::_iceI_getImage, camera, context);
    }

    /// \cond INTERNAL
    void _iceI_getImage(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::RoboCompCameraRGBDSimple::TImage>>&, const ::std::string&, const ::Ice::Context&);
    /// \endcond

    TPoints getPoints(const ::std::string& camera, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::RoboCompCameraRGBDSimple::TPoints>(true, this, &CameraRGBDSimplePrx::_iceI_getPoints, camera, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getPointsAsync(const ::std::string& camera, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::RoboCompCameraRGBDSimple::TPoints>>().get_future())
    {
        return _makePromiseOutgoing<::RoboCompCameraRGBDSimple::TPoints, P>(false, this, &CameraRGBDSimplePrx::_iceI_getPoints, camera, context);
    }

    ::std::function<void()>
    getPointsAsync(const ::std::string& camera,
                   ::std::function<void(::RoboCompCameraRGBDSimple::TPoints)> response,
                   ::std::function<void(::std::exception_ptr)> ex = nullptr,
                   ::std::function<void(bool)> sent = nullptr,
                   const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::RoboCompCameraRGBDSimple::TPoints>(std::move(response), std::move(ex), std::move(sent), this, &RoboCompCameraRGBDSimple::CameraRGBDSimplePrx::_iceI_getPoints, camera, context);
    }

    /// \cond INTERNAL
    void _iceI_getPoints(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::RoboCompCameraRGBDSimple::TPoints>>&, const ::std::string&, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    CameraRGBDSimplePrx() = default;
    friend ::std::shared_ptr<CameraRGBDSimplePrx> IceInternal::createProxy<CameraRGBDSimplePrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

}

/// \cond STREAM
namespace Ice
{

template<typename S>
struct StreamReader<::RoboCompCameraRGBDSimple::HardwareFailedException, S>
{
    static void read(S* istr, ::RoboCompCameraRGBDSimple::HardwareFailedException& v)
    {
        istr->readAll(v.what);
    }
};

template<>
struct StreamableTraits<::RoboCompCameraRGBDSimple::Point3D>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 12;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamReader<::RoboCompCameraRGBDSimple::Point3D, S>
{
    static void read(S* istr, ::RoboCompCameraRGBDSimple::Point3D& v)
    {
        istr->readAll(v.x, v.y, v.z);
    }
};

template<>
struct StreamableTraits<::RoboCompCameraRGBDSimple::TPoints>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 14;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::RoboCompCameraRGBDSimple::TPoints, S>
{
    static void read(S* istr, ::RoboCompCameraRGBDSimple::TPoints& v)
    {
        istr->readAll(v.points, v.alivetime, v.period, v.compressed);
    }
};

template<>
struct StreamableTraits<::RoboCompCameraRGBDSimple::TImage>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 38;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::RoboCompCameraRGBDSimple::TImage, S>
{
    static void read(S* istr, ::RoboCompCameraRGBDSimple::TImage& v)
    {
        istr->readAll(v.compressed, v.cameraID, v.width, v.height, v.depth, v.focalx, v.focaly, v.alivetime, v.period, v.image);
    }
};

template<>
struct StreamableTraits<::RoboCompCameraRGBDSimple::TDepth>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 38;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::RoboCompCameraRGBDSimple::TDepth, S>
{
    static void read(S* istr, ::RoboCompCameraRGBDSimple::TDepth& v)
    {
        istr->readAll(v.compressed, v.cameraID, v.width, v.height, v.focalx, v.focaly, v.alivetime, v.period, v.depthFactor, v.depth);
    }
};

template<>
struct StreamableTraits<::RoboCompCameraRGBDSimple::TRGBD>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 90;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::RoboCompCameraRGBDSimple::TRGBD, S>
{
    static void read(S* istr, ::RoboCompCameraRGBDSimple::TRGBD& v)
    {
        istr->readAll(v.image, v.depth, v.points);
    }
};

}
/// \endcond

/// \cond INTERNAL
namespace RoboCompCameraRGBDSimple
{

using CameraRGBDSimplePtr = ::std::shared_ptr<CameraRGBDSimple>;
using CameraRGBDSimplePrxPtr = ::std::shared_ptr<CameraRGBDSimplePrx>;

}
/// \endcond

#else // C++98 mapping

namespace IceProxy
{

namespace RoboCompCameraRGBDSimple
{

class CameraRGBDSimple;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< CameraRGBDSimple>&);
::IceProxy::Ice::Object* upCast(CameraRGBDSimple*);
/// \endcond

}

}

namespace RoboCompCameraRGBDSimple
{

class CameraRGBDSimple;
/// \cond INTERNAL
::Ice::Object* upCast(CameraRGBDSimple*);
/// \endcond
typedef ::IceInternal::Handle< CameraRGBDSimple> CameraRGBDSimplePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::RoboCompCameraRGBDSimple::CameraRGBDSimple> CameraRGBDSimplePrx;
typedef CameraRGBDSimplePrx CameraRGBDSimplePrxPtr;
/// \cond INTERNAL
void _icePatchObjectPtr(CameraRGBDSimplePtr&, const ::Ice::ObjectPtr&);
/// \endcond

}

namespace RoboCompCameraRGBDSimple
{

class HardwareFailedException : public ::Ice::UserException
{
public:

    HardwareFailedException() {}
    /**
     * One-shot constructor to initialize all data members.
     */
    explicit HardwareFailedException(const ::std::string& what);

#ifdef ICE_CPP11_COMPILER
    HardwareFailedException(const HardwareFailedException&) = default;
    virtual ~HardwareFailedException();
#else
    virtual ~HardwareFailedException() throw();
#endif

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    virtual ::std::string ice_id() const;
    /**
     * Polymorphically clones this exception.
     * @return A shallow copy of this exception.
     */
    virtual HardwareFailedException* ice_clone() const;
    /**
     * Throws this exception.
     */
    virtual void ice_throw() const;

    ::std::string what;

protected:

    /// \cond STREAM
    virtual void _writeImpl(::Ice::OutputStream*) const;
    virtual void _readImpl(::Ice::InputStream*);
    /// \endcond
};

/// \cond INTERNAL
static HardwareFailedException _iceS_HardwareFailedException_init;
/// \endcond

typedef ::std::vector< ::Ice::Byte> ImgType;

typedef ::std::vector< ::Ice::Byte> DepthType;

struct Point3D
{
    ::Ice::Float x;
    ::Ice::Float y;
    ::Ice::Float z;
};

typedef ::std::vector<Point3D> PointsType;

struct TPoints
{
    ::RoboCompCameraRGBDSimple::PointsType points;
    ::Ice::Long alivetime;
    ::Ice::Float period;
    bool compressed;
};

struct TImage
{
    bool compressed;
    ::Ice::Int cameraID;
    ::Ice::Int width;
    ::Ice::Int height;
    ::Ice::Int depth;
    ::Ice::Int focalx;
    ::Ice::Int focaly;
    ::Ice::Long alivetime;
    ::Ice::Float period;
    ::RoboCompCameraRGBDSimple::ImgType image;
};

struct TDepth
{
    bool compressed;
    ::Ice::Int cameraID;
    ::Ice::Int width;
    ::Ice::Int height;
    ::Ice::Int focalx;
    ::Ice::Int focaly;
    ::Ice::Long alivetime;
    ::Ice::Float period;
    ::Ice::Float depthFactor;
    ::RoboCompCameraRGBDSimple::DepthType depth;
};

struct TRGBD
{
    ::RoboCompCameraRGBDSimple::TImage image;
    ::RoboCompCameraRGBDSimple::TDepth depth;
    ::RoboCompCameraRGBDSimple::TPoints points;
};

}

namespace RoboCompCameraRGBDSimple
{

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::RoboCompCameraRGBDSimple::CameraRGBDSimple::begin_getAll.
 * Create a wrapper instance by calling ::RoboCompCameraRGBDSimple::newCallback_CameraRGBDSimple_getAll.
 */
class Callback_CameraRGBDSimple_getAll_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_CameraRGBDSimple_getAll_Base> Callback_CameraRGBDSimple_getAllPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::RoboCompCameraRGBDSimple::CameraRGBDSimple::begin_getDepth.
 * Create a wrapper instance by calling ::RoboCompCameraRGBDSimple::newCallback_CameraRGBDSimple_getDepth.
 */
class Callback_CameraRGBDSimple_getDepth_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_CameraRGBDSimple_getDepth_Base> Callback_CameraRGBDSimple_getDepthPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::RoboCompCameraRGBDSimple::CameraRGBDSimple::begin_getImage.
 * Create a wrapper instance by calling ::RoboCompCameraRGBDSimple::newCallback_CameraRGBDSimple_getImage.
 */
class Callback_CameraRGBDSimple_getImage_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_CameraRGBDSimple_getImage_Base> Callback_CameraRGBDSimple_getImagePtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::RoboCompCameraRGBDSimple::CameraRGBDSimple::begin_getPoints.
 * Create a wrapper instance by calling ::RoboCompCameraRGBDSimple::newCallback_CameraRGBDSimple_getPoints.
 */
class Callback_CameraRGBDSimple_getPoints_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_CameraRGBDSimple_getPoints_Base> Callback_CameraRGBDSimple_getPointsPtr;

}

namespace IceProxy
{

namespace RoboCompCameraRGBDSimple
{

class CameraRGBDSimple : public virtual ::Ice::Proxy<CameraRGBDSimple, ::IceProxy::Ice::Object>
{
public:

    ::RoboCompCameraRGBDSimple::TRGBD getAll(const ::std::string& camera, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getAll(_iceI_begin_getAll(camera, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getAll(const ::std::string& camera, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getAll(camera, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getAll(const ::std::string& camera, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getAll(camera, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getAll(const ::std::string& camera, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getAll(camera, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getAll(const ::std::string& camera, const ::RoboCompCameraRGBDSimple::Callback_CameraRGBDSimple_getAllPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getAll(camera, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getAll(const ::std::string& camera, const ::Ice::Context& context, const ::RoboCompCameraRGBDSimple::Callback_CameraRGBDSimple_getAllPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getAll(camera, context, cb, cookie);
    }

    ::RoboCompCameraRGBDSimple::TRGBD end_getAll(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getAll(const ::std::string&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::RoboCompCameraRGBDSimple::TDepth getDepth(const ::std::string& camera, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getDepth(_iceI_begin_getDepth(camera, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getDepth(const ::std::string& camera, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getDepth(camera, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getDepth(const ::std::string& camera, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getDepth(camera, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getDepth(const ::std::string& camera, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getDepth(camera, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getDepth(const ::std::string& camera, const ::RoboCompCameraRGBDSimple::Callback_CameraRGBDSimple_getDepthPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getDepth(camera, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getDepth(const ::std::string& camera, const ::Ice::Context& context, const ::RoboCompCameraRGBDSimple::Callback_CameraRGBDSimple_getDepthPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getDepth(camera, context, cb, cookie);
    }

    ::RoboCompCameraRGBDSimple::TDepth end_getDepth(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getDepth(const ::std::string&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::RoboCompCameraRGBDSimple::TImage getImage(const ::std::string& camera, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getImage(_iceI_begin_getImage(camera, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getImage(const ::std::string& camera, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getImage(camera, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getImage(const ::std::string& camera, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getImage(camera, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getImage(const ::std::string& camera, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getImage(camera, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getImage(const ::std::string& camera, const ::RoboCompCameraRGBDSimple::Callback_CameraRGBDSimple_getImagePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getImage(camera, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getImage(const ::std::string& camera, const ::Ice::Context& context, const ::RoboCompCameraRGBDSimple::Callback_CameraRGBDSimple_getImagePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getImage(camera, context, cb, cookie);
    }

    ::RoboCompCameraRGBDSimple::TImage end_getImage(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getImage(const ::std::string&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::RoboCompCameraRGBDSimple::TPoints getPoints(const ::std::string& camera, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getPoints(_iceI_begin_getPoints(camera, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getPoints(const ::std::string& camera, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getPoints(camera, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getPoints(const ::std::string& camera, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getPoints(camera, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getPoints(const ::std::string& camera, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getPoints(camera, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getPoints(const ::std::string& camera, const ::RoboCompCameraRGBDSimple::Callback_CameraRGBDSimple_getPointsPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getPoints(camera, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getPoints(const ::std::string& camera, const ::Ice::Context& context, const ::RoboCompCameraRGBDSimple::Callback_CameraRGBDSimple_getPointsPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getPoints(camera, context, cb, cookie);
    }

    ::RoboCompCameraRGBDSimple::TPoints end_getPoints(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getPoints(const ::std::string&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

}

}

namespace RoboCompCameraRGBDSimple
{

class CameraRGBDSimple : public virtual ::Ice::Object
{
public:

    typedef CameraRGBDSimplePrx ProxyType;
    typedef CameraRGBDSimplePtr PointerType;

    virtual ~CameraRGBDSimple();

#ifdef ICE_CPP11_COMPILER
    CameraRGBDSimple() = default;
    CameraRGBDSimple(const CameraRGBDSimple&) = default;
    CameraRGBDSimple& operator=(const CameraRGBDSimple&) = default;
#endif

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual TRGBD getAll(const ::std::string& camera, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_getAll(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual TDepth getDepth(const ::std::string& camera, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_getDepth(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual TImage getImage(const ::std::string& camera, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_getImage(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual TPoints getPoints(const ::std::string& camera, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_getPoints(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

protected:

    /// \cond STREAM
    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
    /// \endcond
};

/// \cond INTERNAL
inline bool operator==(const CameraRGBDSimple& lhs, const CameraRGBDSimple& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const CameraRGBDSimple& lhs, const CameraRGBDSimple& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}
/// \endcond

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamableTraits< ::RoboCompCameraRGBDSimple::HardwareFailedException>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<typename S>
struct StreamWriter< ::RoboCompCameraRGBDSimple::HardwareFailedException, S>
{
    static void write(S* ostr, const ::RoboCompCameraRGBDSimple::HardwareFailedException& v)
    {
        ostr->write(v.what);
    }
};

template<typename S>
struct StreamReader< ::RoboCompCameraRGBDSimple::HardwareFailedException, S>
{
    static void read(S* istr, ::RoboCompCameraRGBDSimple::HardwareFailedException& v)
    {
        istr->read(v.what);
    }
};

template<>
struct StreamableTraits< ::RoboCompCameraRGBDSimple::Point3D>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 12;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamWriter< ::RoboCompCameraRGBDSimple::Point3D, S>
{
    static void write(S* ostr, const ::RoboCompCameraRGBDSimple::Point3D& v)
    {
        ostr->write(v.x);
        ostr->write(v.y);
        ostr->write(v.z);
    }
};

template<typename S>
struct StreamReader< ::RoboCompCameraRGBDSimple::Point3D, S>
{
    static void read(S* istr, ::RoboCompCameraRGBDSimple::Point3D& v)
    {
        istr->read(v.x);
        istr->read(v.y);
        istr->read(v.z);
    }
};

template<>
struct StreamableTraits< ::RoboCompCameraRGBDSimple::TPoints>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 14;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamWriter< ::RoboCompCameraRGBDSimple::TPoints, S>
{
    static void write(S* ostr, const ::RoboCompCameraRGBDSimple::TPoints& v)
    {
        ostr->write(v.points);
        ostr->write(v.alivetime);
        ostr->write(v.period);
        ostr->write(v.compressed);
    }
};

template<typename S>
struct StreamReader< ::RoboCompCameraRGBDSimple::TPoints, S>
{
    static void read(S* istr, ::RoboCompCameraRGBDSimple::TPoints& v)
    {
        istr->read(v.points);
        istr->read(v.alivetime);
        istr->read(v.period);
        istr->read(v.compressed);
    }
};

template<>
struct StreamableTraits< ::RoboCompCameraRGBDSimple::TImage>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 38;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamWriter< ::RoboCompCameraRGBDSimple::TImage, S>
{
    static void write(S* ostr, const ::RoboCompCameraRGBDSimple::TImage& v)
    {
        ostr->write(v.compressed);
        ostr->write(v.cameraID);
        ostr->write(v.width);
        ostr->write(v.height);
        ostr->write(v.depth);
        ostr->write(v.focalx);
        ostr->write(v.focaly);
        ostr->write(v.alivetime);
        ostr->write(v.period);
        ostr->write(v.image);
    }
};

template<typename S>
struct StreamReader< ::RoboCompCameraRGBDSimple::TImage, S>
{
    static void read(S* istr, ::RoboCompCameraRGBDSimple::TImage& v)
    {
        istr->read(v.compressed);
        istr->read(v.cameraID);
        istr->read(v.width);
        istr->read(v.height);
        istr->read(v.depth);
        istr->read(v.focalx);
        istr->read(v.focaly);
        istr->read(v.alivetime);
        istr->read(v.period);
        istr->read(v.image);
    }
};

template<>
struct StreamableTraits< ::RoboCompCameraRGBDSimple::TDepth>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 38;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamWriter< ::RoboCompCameraRGBDSimple::TDepth, S>
{
    static void write(S* ostr, const ::RoboCompCameraRGBDSimple::TDepth& v)
    {
        ostr->write(v.compressed);
        ostr->write(v.cameraID);
        ostr->write(v.width);
        ostr->write(v.height);
        ostr->write(v.focalx);
        ostr->write(v.focaly);
        ostr->write(v.alivetime);
        ostr->write(v.period);
        ostr->write(v.depthFactor);
        ostr->write(v.depth);
    }
};

template<typename S>
struct StreamReader< ::RoboCompCameraRGBDSimple::TDepth, S>
{
    static void read(S* istr, ::RoboCompCameraRGBDSimple::TDepth& v)
    {
        istr->read(v.compressed);
        istr->read(v.cameraID);
        istr->read(v.width);
        istr->read(v.height);
        istr->read(v.focalx);
        istr->read(v.focaly);
        istr->read(v.alivetime);
        istr->read(v.period);
        istr->read(v.depthFactor);
        istr->read(v.depth);
    }
};

template<>
struct StreamableTraits< ::RoboCompCameraRGBDSimple::TRGBD>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 90;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamWriter< ::RoboCompCameraRGBDSimple::TRGBD, S>
{
    static void write(S* ostr, const ::RoboCompCameraRGBDSimple::TRGBD& v)
    {
        ostr->write(v.image);
        ostr->write(v.depth);
        ostr->write(v.points);
    }
};

template<typename S>
struct StreamReader< ::RoboCompCameraRGBDSimple::TRGBD, S>
{
    static void read(S* istr, ::RoboCompCameraRGBDSimple::TRGBD& v)
    {
        istr->read(v.image);
        istr->read(v.depth);
        istr->read(v.points);
    }
};

}
/// \endcond

namespace RoboCompCameraRGBDSimple
{

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::RoboCompCameraRGBDSimple::CameraRGBDSimple::begin_getAll.
 * Create a wrapper instance by calling ::RoboCompCameraRGBDSimple::newCallback_CameraRGBDSimple_getAll.
 */
template<class T>
class CallbackNC_CameraRGBDSimple_getAll : public Callback_CameraRGBDSimple_getAll_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const TRGBD&);

    CallbackNC_CameraRGBDSimple_getAll(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        CameraRGBDSimplePrx proxy = CameraRGBDSimplePrx::uncheckedCast(result->getProxy());
        TRGBD ret;
        try
        {
            ret = proxy->end_getAll(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCameraRGBDSimple::CameraRGBDSimple::begin_getAll.
 */
template<class T> Callback_CameraRGBDSimple_getAllPtr
newCallback_CameraRGBDSimple_getAll(const IceUtil::Handle<T>& instance, void (T::*cb)(const TRGBD&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CameraRGBDSimple_getAll<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCameraRGBDSimple::CameraRGBDSimple::begin_getAll.
 */
template<class T> Callback_CameraRGBDSimple_getAllPtr
newCallback_CameraRGBDSimple_getAll(T* instance, void (T::*cb)(const TRGBD&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CameraRGBDSimple_getAll<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::RoboCompCameraRGBDSimple::CameraRGBDSimple::begin_getAll.
 * Create a wrapper instance by calling ::RoboCompCameraRGBDSimple::newCallback_CameraRGBDSimple_getAll.
 */
template<class T, typename CT>
class Callback_CameraRGBDSimple_getAll : public Callback_CameraRGBDSimple_getAll_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const TRGBD&, const CT&);

    Callback_CameraRGBDSimple_getAll(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        CameraRGBDSimplePrx proxy = CameraRGBDSimplePrx::uncheckedCast(result->getProxy());
        TRGBD ret;
        try
        {
            ret = proxy->end_getAll(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCameraRGBDSimple::CameraRGBDSimple::begin_getAll.
 */
template<class T, typename CT> Callback_CameraRGBDSimple_getAllPtr
newCallback_CameraRGBDSimple_getAll(const IceUtil::Handle<T>& instance, void (T::*cb)(const TRGBD&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CameraRGBDSimple_getAll<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCameraRGBDSimple::CameraRGBDSimple::begin_getAll.
 */
template<class T, typename CT> Callback_CameraRGBDSimple_getAllPtr
newCallback_CameraRGBDSimple_getAll(T* instance, void (T::*cb)(const TRGBD&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CameraRGBDSimple_getAll<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::RoboCompCameraRGBDSimple::CameraRGBDSimple::begin_getDepth.
 * Create a wrapper instance by calling ::RoboCompCameraRGBDSimple::newCallback_CameraRGBDSimple_getDepth.
 */
template<class T>
class CallbackNC_CameraRGBDSimple_getDepth : public Callback_CameraRGBDSimple_getDepth_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const TDepth&);

    CallbackNC_CameraRGBDSimple_getDepth(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        CameraRGBDSimplePrx proxy = CameraRGBDSimplePrx::uncheckedCast(result->getProxy());
        TDepth ret;
        try
        {
            ret = proxy->end_getDepth(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCameraRGBDSimple::CameraRGBDSimple::begin_getDepth.
 */
template<class T> Callback_CameraRGBDSimple_getDepthPtr
newCallback_CameraRGBDSimple_getDepth(const IceUtil::Handle<T>& instance, void (T::*cb)(const TDepth&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CameraRGBDSimple_getDepth<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCameraRGBDSimple::CameraRGBDSimple::begin_getDepth.
 */
template<class T> Callback_CameraRGBDSimple_getDepthPtr
newCallback_CameraRGBDSimple_getDepth(T* instance, void (T::*cb)(const TDepth&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CameraRGBDSimple_getDepth<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::RoboCompCameraRGBDSimple::CameraRGBDSimple::begin_getDepth.
 * Create a wrapper instance by calling ::RoboCompCameraRGBDSimple::newCallback_CameraRGBDSimple_getDepth.
 */
template<class T, typename CT>
class Callback_CameraRGBDSimple_getDepth : public Callback_CameraRGBDSimple_getDepth_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const TDepth&, const CT&);

    Callback_CameraRGBDSimple_getDepth(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        CameraRGBDSimplePrx proxy = CameraRGBDSimplePrx::uncheckedCast(result->getProxy());
        TDepth ret;
        try
        {
            ret = proxy->end_getDepth(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCameraRGBDSimple::CameraRGBDSimple::begin_getDepth.
 */
template<class T, typename CT> Callback_CameraRGBDSimple_getDepthPtr
newCallback_CameraRGBDSimple_getDepth(const IceUtil::Handle<T>& instance, void (T::*cb)(const TDepth&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CameraRGBDSimple_getDepth<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCameraRGBDSimple::CameraRGBDSimple::begin_getDepth.
 */
template<class T, typename CT> Callback_CameraRGBDSimple_getDepthPtr
newCallback_CameraRGBDSimple_getDepth(T* instance, void (T::*cb)(const TDepth&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CameraRGBDSimple_getDepth<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::RoboCompCameraRGBDSimple::CameraRGBDSimple::begin_getImage.
 * Create a wrapper instance by calling ::RoboCompCameraRGBDSimple::newCallback_CameraRGBDSimple_getImage.
 */
template<class T>
class CallbackNC_CameraRGBDSimple_getImage : public Callback_CameraRGBDSimple_getImage_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const TImage&);

    CallbackNC_CameraRGBDSimple_getImage(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        CameraRGBDSimplePrx proxy = CameraRGBDSimplePrx::uncheckedCast(result->getProxy());
        TImage ret;
        try
        {
            ret = proxy->end_getImage(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCameraRGBDSimple::CameraRGBDSimple::begin_getImage.
 */
template<class T> Callback_CameraRGBDSimple_getImagePtr
newCallback_CameraRGBDSimple_getImage(const IceUtil::Handle<T>& instance, void (T::*cb)(const TImage&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CameraRGBDSimple_getImage<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCameraRGBDSimple::CameraRGBDSimple::begin_getImage.
 */
template<class T> Callback_CameraRGBDSimple_getImagePtr
newCallback_CameraRGBDSimple_getImage(T* instance, void (T::*cb)(const TImage&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CameraRGBDSimple_getImage<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::RoboCompCameraRGBDSimple::CameraRGBDSimple::begin_getImage.
 * Create a wrapper instance by calling ::RoboCompCameraRGBDSimple::newCallback_CameraRGBDSimple_getImage.
 */
template<class T, typename CT>
class Callback_CameraRGBDSimple_getImage : public Callback_CameraRGBDSimple_getImage_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const TImage&, const CT&);

    Callback_CameraRGBDSimple_getImage(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        CameraRGBDSimplePrx proxy = CameraRGBDSimplePrx::uncheckedCast(result->getProxy());
        TImage ret;
        try
        {
            ret = proxy->end_getImage(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCameraRGBDSimple::CameraRGBDSimple::begin_getImage.
 */
template<class T, typename CT> Callback_CameraRGBDSimple_getImagePtr
newCallback_CameraRGBDSimple_getImage(const IceUtil::Handle<T>& instance, void (T::*cb)(const TImage&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CameraRGBDSimple_getImage<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCameraRGBDSimple::CameraRGBDSimple::begin_getImage.
 */
template<class T, typename CT> Callback_CameraRGBDSimple_getImagePtr
newCallback_CameraRGBDSimple_getImage(T* instance, void (T::*cb)(const TImage&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CameraRGBDSimple_getImage<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::RoboCompCameraRGBDSimple::CameraRGBDSimple::begin_getPoints.
 * Create a wrapper instance by calling ::RoboCompCameraRGBDSimple::newCallback_CameraRGBDSimple_getPoints.
 */
template<class T>
class CallbackNC_CameraRGBDSimple_getPoints : public Callback_CameraRGBDSimple_getPoints_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const TPoints&);

    CallbackNC_CameraRGBDSimple_getPoints(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        CameraRGBDSimplePrx proxy = CameraRGBDSimplePrx::uncheckedCast(result->getProxy());
        TPoints ret;
        try
        {
            ret = proxy->end_getPoints(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCameraRGBDSimple::CameraRGBDSimple::begin_getPoints.
 */
template<class T> Callback_CameraRGBDSimple_getPointsPtr
newCallback_CameraRGBDSimple_getPoints(const IceUtil::Handle<T>& instance, void (T::*cb)(const TPoints&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CameraRGBDSimple_getPoints<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCameraRGBDSimple::CameraRGBDSimple::begin_getPoints.
 */
template<class T> Callback_CameraRGBDSimple_getPointsPtr
newCallback_CameraRGBDSimple_getPoints(T* instance, void (T::*cb)(const TPoints&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CameraRGBDSimple_getPoints<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::RoboCompCameraRGBDSimple::CameraRGBDSimple::begin_getPoints.
 * Create a wrapper instance by calling ::RoboCompCameraRGBDSimple::newCallback_CameraRGBDSimple_getPoints.
 */
template<class T, typename CT>
class Callback_CameraRGBDSimple_getPoints : public Callback_CameraRGBDSimple_getPoints_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const TPoints&, const CT&);

    Callback_CameraRGBDSimple_getPoints(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        CameraRGBDSimplePrx proxy = CameraRGBDSimplePrx::uncheckedCast(result->getProxy());
        TPoints ret;
        try
        {
            ret = proxy->end_getPoints(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCameraRGBDSimple::CameraRGBDSimple::begin_getPoints.
 */
template<class T, typename CT> Callback_CameraRGBDSimple_getPointsPtr
newCallback_CameraRGBDSimple_getPoints(const IceUtil::Handle<T>& instance, void (T::*cb)(const TPoints&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CameraRGBDSimple_getPoints<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCameraRGBDSimple::CameraRGBDSimple::begin_getPoints.
 */
template<class T, typename CT> Callback_CameraRGBDSimple_getPointsPtr
newCallback_CameraRGBDSimple_getPoints(T* instance, void (T::*cb)(const TPoints&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CameraRGBDSimple_getPoints<T, CT>(instance, cb, excb, sentcb);
}

}

#endif

#include <IceUtil/PopDisableWarnings.h>
#endif
